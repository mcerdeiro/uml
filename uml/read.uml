@startuml
participant App
participant posix
participant I2CDev
participant RTOS
participant I2CDriver

== blocking read to I2C device ==
activate App
App -> posix: read(buf, 10);
activate posix
note right: posix defines a read command such this to get upto 10 bytes.\nIn I2C the bahaviour is different. This command will return aftear\nreading 10 bytes. Only in case of error less than 10 bytes will be\nreturned.
posix -> I2CDev: read("buf, 10");
activate I2CDev
I2CDev -> I2CDriver: ioctl("START");
activate I2CDriver
I2CDev <-- I2CDriver:
deactivate I2CDriver
I2CDev -> I2CDriver: write("0x71 0x00 0x00");
activate I2CDriver
note left: 0x71: bits 7-1 Add 0x50 for the device\nand Bit 0 is 1 for read. The following\n2 0x00 are the address. Two bytes due to\nthe configuration of this device. The\naddress is only transmited in the\nfirst time or if chaning with\nlseek interface.
I2CDev <-- I2CDriver: ret = 2 (2Bytes queued for send);
deactivate I2CDriver
I2CDev ->x RTOS: WaitEvent()
deactivate I2CDev

I2CDev <- I2CDriver: txConfirmation
activate I2CDriver
activate I2CDev
I2CDev -> I2CDriver: write(0x00);
activate I2CDriver
I2CDev <-- I2CDriver: ret = 1 (1Byte queued for send);
deactivate I2CDriver
I2CDev --> I2CDriver
deactivate I2CDev
deactivate I2CDriver

I2CDev <- I2CDriver: txConfirmation
activate I2CDriver
activate I2CDev
I2CDev -> I2CDriver: read(buf, 10);
note left: the buffer application is passed to the driver\nto avoid coping the data.
activate I2CDriver
I2CDev <-- I2CDriver: ret = 0
note left: the driver starts reading, at this\npoint no data is available,\nthe driver returns 0. The driver\nstarts the reception.
deactivate I2CDriver
I2CDev --> I2CDriver
deactivate I2CDev
deactivate I2CDriver

I2CDev <- I2CDriver: rxIndication
activate I2CDriver
activate I2CDev
I2CDev -> I2CDriver: read(buf, 10);
activate I2CDriver
I2CDev <-- I2CDriver: ret = 5
deactivate I2CDriver
note left: the device request for 10 bytes\nand the driver provide 5\nso reception continues.
I2CDev --> I2CDriver
deactivate I2CDev
deactivate I2CDriver

I2CDev <- I2CDriver: rxIndication
activate I2CDriver
activate I2CDev
I2CDev -> I2CDriver: read(buf, 5);
activate I2CDriver
I2CDev <-- I2CDriver: ret = 5
deactivate I2CDriver
I2CDev -> I2CDriver: ioctl("STOP");
note left: if no other operations\nare pending the driver\nis stopped.
activate I2CDriver
I2CDev <-- I2CDriver:
deactivate I2CDriver
I2CDev ->x RTOS: SetEvent();
note left: All bytes have been received,\nappl. can be continued.
I2CDev --> I2CDriver
deactivate I2CDev
deactivate I2CDriver

I2CDev <-- RTOS: Return from WaitEvent
activate I2CDev
posix <-- I2CDev
deactivate I2CDev
App <-- posix
deactivate posix
deactivate App
@enduml
